자주 쓰이는 혹은 익숙함 위주로 정리

CONFIG
vue-cli
install: npm i -g @vue/cli
init: vue create foo
plugin
install: vue add foo
vue-router, vuex
build
npm run serve
npm run build


entry point
main.js
App.vue


filter
filters: { f1: () => (), f2: () => (), }
<div>{{ foo | f1 | f2 }}</div>


directive
분기
<p v-if="isFoo">foo</p>: dom 구현
<p v-show="isFoo">foo</p>: display 속성 변경
스타일
<p v-bind:class="{foo: isFoo, bar: isBar}">foo</p>
<p v-bind:class="{foo: !(isBar)}">foo</p>
<p v-bind:class="foo">foo</p>
computed: { foo: function() { return { c1: this.$data.isBar, c2: this.$data.isBar } } }
<p v-bind:style="{color: 'green'}">foo</p>
<p v-bind:style="{border: (isBar ? '1px solid red' : ''), color: 'red'}">foo</p>
<p v-bind:style="foo">foo</p>
computed: { foo: function() { return { border: (this.isBar) ? '1px solid green' : '', color: 'green' } } }
생략표기: 'v-bind:' 를 ':'로: <button :disabled="isBar">foo</button>
반복
<ul> <li v-for="(v) in ['foo', 'bar']" v-bind:key="v">{{v}}</li> </ul>
<ul> <li v-for="(v, k) in ['foo', 'bar']" v-bind:key="k">{{k}} | {{v}}</li> </ul>
<ul> <li v-for="(v) in [{'foo': 'foo'}, {'foo': 'bar'}]" v-bind:key="v.foo">{{v.foo}}</li> </ul>
이벤트: v-on
<input type="number" v-on:input="foo.ctr = $event.target.value" v-bind:value="foo.ctr" /> <span>{{ foo.ctr }}</span>
<input type="number" v-on:change="foo.ctr = $event.target.value" v-bind:value="foo.ctr" /> <span>{{ foo.ctr }}</span>
생략표기: 'v-on:'을 '@'으로: <button @click="foo.ctr++">foo</button>
폼 입력 바인딩: v-model: 양방향 데이터 바인딩
<input type="number" v-model="foo.ctr" min="0" />
<ul> <li v-for="(v) in foo.items" v-bind:key="v.k"> <input type="text" v-model="v.k" /> | {{ v.k }} </li> </ul>
data: () => ({ foo: { items: [{'k':'v1'}, {'k':'v2'}] } });


slot
단일 슬롯
SlotSingle.vue: <template><div><slot>aa</slot></div></template>
SlotV.vue: <template><div><SlotSingle></SlotSingle><SlotSingle>AA</SlotSingle></div></template>
이름 가지는 슬롯
SlotName: <template><div><slot name="aa">aa</slot><slot>bb</slot></div></template>
SlotV.vue: <template><div><SlotName></SlotName><SlotName><div slot="aa"></div><div>BB</div></SlotName></div></template>
슬롯의 범위: 부모 범위에 속하므로 자식 컴포넌트 데이터에 접근하려면 v-bind 로 전달
SlotScope.vue: <template><div><slot v-bind:foo="foo">{{ foo }}</slot></div></template>
props: { foo: { type: String } }
SlotV.vue: <template><div><SlotScope v-bind:foo="foo"></SlotScope></div></template>

COMPONENT
event
부모-자식 간 데이터 전달: props
부모: <ComponentChild v-bind:foo="foo" v-bind:bar="bar"></ComponentChild>
data: () => ({ foo: 'foo', bar: [ { k: 1 }, { k: 2 } ], })
자식: props: { foo: { type: String, default: 'foo', required: true, validator: () => true, }, bar: { type: Array, }
<div>{{ foo }}</div> <ul><li v-for="(v) in bar" v-bind:key="v.k">{{v.k}}</li></ul>
자식-부모 간 데이터 전달: on(리스닝), emit(트리거)
자식: <input type="text" @input="fooChild = $event.target.value" :value="fooChild" /> | <button v-on:click="setFoo">setFoo</button>
data: () => ({ fooChild: '' }), props: { foo: {} }, methods: { setFoo() { this.$emit('setFoo', this.fooChild); } }
부모: <ComponentChild v-bind:foo="foo" v-on:setFoo="setFoo"></ComponentChild><div>{{ foo }}</div>
data: () => ({ foo: 'foo', }), methods: { setFoo(v) { this.foo = v; } }


route
<router-view>
페이지의 url이 이동했을 때 그 범위내에서 뿌려주는 태그

:key="$route.fullpath"
key를 통해 경로 개체 속성을 강제로 연결한다. 보여지는 화면에 쿼리 및 해시가 포함된 전체 URL을 연결하며
쿼리 스트링이 변경될 때 마다 , 즉 탐색하는 이벤트가 발생할떄 마다 페이지를 다시 리로드해서 노출시킨다.
$route.path
유형 : String
항상 절대 경로로 확인되는 현재 경로의 경로와 동일한 문자열이다. ex) /foo/bar
$route.params
유형: Object
동적 세그먼트 및 스타 세그먼트의 키/값 쌍을 포함하는 개체이다. 매개변수가 없으면 값은 빈 개체가 된다.
$route.query
유형:Object
쿼리 문자열의 키/값 쌍을 포함하는 개체이다. 예를 들어 경로의 /foo?user=1의 경우 $route.query.user == 1. 쿼리가 없으면
값은 빈 개체가 된다.
$route.meta
유형: Object
경로 메타 개체의 키/값 쌍을 포함하는 개체다. 메타 속성이 없는 경우 값은 빈 개체가 된다.
$route.hash
유형: String
현재 경로의 해시 (가있는 #경우)이다. 해시가 없으면 값은 빈 문자열이 된다.

컴포넌트 겹치기
const forumRoute = [
  {
    component: ForumV,
    path: '/forums',
    children: [
      {
        component: ForumListV,
        name: 'ForumList',
        path: '',
      },
      {
        component: ForumItemV,
        name: 'ForumItemWrite',
        path: 'write'
      },
      {
        component: ForumItemV,
        name: 'ForumItem',
        path: ':forumId'
      },
    ]
  }
]
children으로 품어 path 로 구분지어준다. ( 현재 ForumV는<router-view :key route.fullpath>로 설정 되어 있다.)

DATA

mixin
컴포넌트 범위 믹스인
mixins/foo.js
export const FooMixin = { data: () => ({ fooMixinFoo: 'fooMixinFoo' }), methods: { getFooMixinFoo: function() { console.log(this.fooMixinFoo) } } }
data, method 등 내부의 네이밍이 믹스인을 호출한 컴포넌트에 공유됨, 중복될 경우 컴포넌트의 속성이 우선
MixinV.vue
<template><div><button @click="getFooMixinFoo">getFooMixinFoo</button></div></template>
mixins: [ FooMixin ],
전역 믹스인
mixins/index.js: const mixin = { data: () => {()}, methods: {} }; export default mixin;
src/main.js: Vue.mixin(mixin);



store
const store = new Vuex.Store({ actions: {}, getters: {}, modules: {}, mutations: {}, state: {} });state: { ctr: 0 }
this.$store.state.ctr
getters: { getCtrSquare: (state) => (state.ctr * state.ctr) }
인자 state, 계산, 캐시
this.$store.getters.getCtrSquare
mutations: { setCtrAdd(state, inc) { state.ctr += inc; } }
인자 state, 갱신, 동기 처리
this.$store.commit('setCtrAdd', 2)
actions: { setCtrAddAction(ctx) { ... ctx.commit('setCtrAdd') } }
actions 함수로 호출할때 단일 파라미터는 상관없으나 두개 이상의 파라미터인 경우 반드시 객체로 던질것.
인자 context, 소통, api, 비동기 처리, 뮤테이션 호출
this.$store.dispatch('setCtrAddAction')
dispatch('함수명', '전달인자') ...... ex) dispatch('함수명' , '전달인자' , {root:true})
action => mutation => state => getter
module 단위 분할
const fooStore = { namespaced: true, actions: {}, modules: {}, mutations: {}, state: {} }
this.$store.state.fooStore.foo
this.$store.getters['fooStore/getFooUpper']
this.$store.commit('fooStore/setFooConcat', 'bar')
this.$store.dispatch('fooStore/setFooAddAction')
router 연동
동기화
import { sync } from 'vuex-router-sync'; sync(store, router);
getters: { getId: (state, getters, rootState) => (Number(rootState.route.params.id)), }
라우터 인스턴스 사용
actions: { redirectId(ctx, id) { ... router.push(/data/store/${id}); } }
helper
import { mapActions, mapGetters, mapMutations, mapState } from 'vuex'
mapState
mapGetters
mapMutations
mapActions
